/*****************************************************************
* 11-3 스터디
* 스터디 일정 : 21일
* 스프린트 기간  : 11월 22일 ~ 11월 27일
* 스트린트 user stories :
*	addressBook.c / addressBook.h 파일 클래스로 변경하기 - 11/27
*	Node 클래스도 멤버 변수는 public으로 구현 - 11/27
*	복사 생성자 구현 - 183page 참고 - 11/27
*	연산자 overriding 구현 = , << , == - 11/27
*	PersonInfo 클래스내 멤버 변수는 private으로 구현 - 11/30
*	PersonInfo 클래스내 각각의 멤버 변수마다 get, set함수구현필요 - 11/30
*****************************************************************/
1. 추가된 부분
iso::binary 인 경우 file open할떄
파일을 로드할때 객체로 저장할수 있다.
대신 바이너리 해야 한다.

2. 복사생성자와 디폴트 생성자의 관계
void main()
{
	PersonInfo *a = new PersonInfo("a","b","c");
	PersonInfo *b = new PersonInfo(a);	
		1. PersonInfo() - b 가 생성 따라서, 디폴트 생성자 필요
		2. PersonInfo(PersonInfo&)
}

3. 구현시 확인할 부분
	1. save()함수에서 target = nullptr 이 필요한지 확인 필요 - 맞다
	2. 복사 생성자는 PersonInfo 에서만 필요한지 확인 필요 - 맞다
	3. 복사 생성자를 추가하면 디폴트 생성자도 추가해야 하는지 확인 필요 - 맞다
	4. PersonalInfo의 멤버 변수를 private 로하면 외부에서 직접 접근이 되지 않는다. - set, get  함수 신설이 필요해 보임 - 맞다
	조건 : 멤버함수에서만 접근하면 구현안해도 되고, 클래스 외부에서 접근할때는
	각각의 멤버 변수마다 get, set 함수를 구현해야한다.

4. 아래는 PersonalInfo관련해서 생성자, 복사생성자 관련해서 임시로 구현한 부분이다.
class PersonalInfo {
private:
	string name;
	string phone;
	string address;
public:
	// default constructor
	PersonalInfo(); // 디폴트 생성자???
	PersonalInfo(string, string, string); //일반생성자???

	// copy constructor
	PersonalInfo(PersonalInfo &info);

	//void setName(string);
	//string getName();
	//void setPhone(string);
	//string getPhone();
	//void setAddress(string);
	//string getAddress();

	// overloading operators
	PersonalInfo& operator= (PersonalInfo& info);
	bool operator== (PersonalInfo& info); //name기준
	bool operator== (string& info); //name기준
	ostream& operator<< (ostream& os);
};

PersonalInfo::PersonalInfo() {
	name = "";
	phone = "";
	address = "";
} //디폴트 생성자???

PersonInfo::PersonInfo(PersonInfo& info) {
	this->name = info.name;
	this->phone = info.phone;
	this->address = info.address;
} //복사 생성자

PersonalInfo::PersonalInfo(string name, string phone, string address) {
//일반생성자 우리는 안쓴다
	this->name = name;
	this->phone = phone;
	this->address = address;
}

5. 연산자오버로딩활용

대입연자오버로딩
append 
1번 케이스
	newNode->info = new PersonalInfo;
	newNode->info->name = info.name;
	newNode->info->phone = info.phone;
	newNode->info->address = info.address;	
	newNode = info;
	
2번 케이스 - 복사생성자
	newNode->info = new PersonalInfo(info);
	//복사생성자도 구현이 되어있어야 가능하다.

동등비교연산자 ==
int List::findName(string name) {
원본
if (this->pos->info->name == name) {
갱신
if ( this->pos->info == name ) {
단 갱신을 사용하려면
PersonInfo 내에 bool operator== (string& name); 를 구현해야함

출력연산자 사용
ostream& PersonalInfo::operator<< (ostream& os) {
	os << os.width(8) << left << name << "  " ;
	os << os.width(12) << left <<phone << "  ";
	os << os.width(50) << left << address;
	return os;
}

void AddressBook::printPersonInfo(PersonalInfo &info, int printNum) {
	if (printNum != FALSE) {
		cout.width(4);
		cout << left << printNum;
		cout << "  ";
	}	
	cout << info;
	cout << endl;
	
}


/*****************************************************************
* 11-4 스터디
* 스터디 일정 : 11월 27일
* 스프린트 기간  : 11월 27일 ~ 12월 05일
* 스트린트 user stories :
*	연산자 오버로딩(=, ==, <<) 구현 완료된 부분 코드에 적용 - 11/29
*	PersonalInfo 클래스내 멤버 변수는 private으로 구현 - 11/29
*	PersonalInfo 멤버 변수마다 get, set함수구현 - 11/29
*	<<연산자 관련해서 출력시 발생하는 오류 수정 - 11/30
*****************************************************************/

<1번> operator<<
operator<< 를 사용할때는 friend 함수로 class내에 선언하고 구현해야 한다.
=>하지만 ostream에는 일반적인 자료형에 대해서만 <<연산자 오버로딩이 되어있고,
사용자정의 자료형에 대해서는 <<오버로딩이 되어있지 않다.
어떤 사용자정의형이 만들어질지 모르니 구현이 안되있는건 당연한 것이다.

friend를 사용하는이유 : 외부에서 클래스의 private 변수를 접근해야 하기 때문이다.
비멤버(전역변수)를 사용하는 이유 : 연산자가 왼쪽 인수에 자신이 아닌 다른 것을 필요로 한다.

//클래스 정의부
class PersonalInfo {
	...
	...
	friend ostream& operator<< (ostream& os, PersonalInfo& info);
}

//overloading operator <<
ostream& operator<< (ostream& os, PersonalInfo& info) {
	os << os.width(8) << left << info.name << "  ";
	os << os.width(12) << left << info.phone << "  ";
	os << os.width(50) << left << info.address;
	return os;
}

// 실재 사용 코드
void AddressBook::printPersonInfo(PersonalInfo &info, int printNum) {
	if (printNum != FALSE) {
		cout.width(4);
		cout << left << printNum;
		cout << "  ";
	}
	cout << info;
	cout << endl;
}

<2번> operator== - 이 경우 friend로 하면 에러가 발생한다.
교재 : 연산자 함수를 멤버함수로 정의하려면 왼쪽 인수는 반드시 자신이 속한 클래스의 오브젝트이어야 한다.
만약 연산자가 왼쪽 인수에 그렇지 않은 다른 것을 필요로 한다면 반드시 비멤버 함수로 선언해야 한다.
또한 비멤버 이면서 클래스의 public이 아닌 멤버에 접근하고자 한다면, friend로 선언한다.

friend를 사용하는이유 : 외부에서 클래스의 private 변수를 접근해야 하기 때문이다.
비멤버(전역변수)를 사용하는 이유 : 연산자가 왼쪽 인수에 자신이 아닌 다른 것을 필요로 한다.

class PersonalInfo {
	...
	...
	bool operator== (string& info);
}

//overloading operator ==
bool PersonalInfo::operator== (string& info) {
	if (name == info) {
		return true;
	}
	else {
		return false;
	}
}

<3번> operator= 아래와 같이 변경
//overloading operator = 
PersonalInfo& PersonalInfo::operator= (PersonalInfo& info) {
	name = info.name;
	phone = info.phone;
	address = info.address;

	return *this;
}

PersonalInfo List::viewAt(int index) {
	PersonalInfo info;
	Node *target;

	target = this->moveToBeforeNode(index)->next;

	//변경전
	//info.name = target->info->name;
	//info.phone = target->info->phone;
	//info.address = target->info->address;
	//변경 후
	info = *(target->info);

	this->pos = target;
	target = nullptr;
	return info;
}

int List::findName(string name) {
	int index = 0;
	int isFound = FALSE;

	this->moveFirst();
	while (this->isTail() != TRUE) {
		//변경전
		if (this->pos->info.name == name) {
		//변경후
		if (*(this->pos->info) == name) {
			isFound = TRUE;
			break;
		}
		this->moveNext();
		index++;
	}

	if (isFound == FALSE) {
		index = -1;
	}

	return index;
}

<4> 파일 로드에서 잘못된 값이 출력됨  - 완료
<1>번에서 처럼 코드를 구성해서 출력시 잘못된 문제가 발생함 (0이 출력된다?)
이유는 os.width(8)등은 ostream으로 출력하기 전에 설정해야 한다.
사용성 개선을 위해서 setw라는 매니플레이트를 사용했다.

변경 전
os << os.width(8) << left << info.name << "  ";
변경 후
os.width(8);
os << left << info.name << "  ";
사용성 추가 - setw라는 manipulators를 사용함. 단, <iomanip>를 추가해야 함.
os << setw(8) << left << info.name << "  ";

ostream& operator<< (ostream& os, PersonalInfo& info) {
	os << setw(8) << left << info.name << "  ";
	os << setw(12) << left << info.phone << "  ";
	os << setw(50) << left << info.address;

	return os;
}

/*****************************************************************
* 12-1 스터디
* 스터디 일정 : 12월 05일
* 스프린트 기간  : 11월 27일 ~ 12월 04일
* 스트린트 user stories :
*	
*	
*	
*	
*****************************************************************/
